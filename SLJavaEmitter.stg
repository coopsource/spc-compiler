group SLJavaEmitter;

program(name,fList) ::=
<<
public class <name>
{
    static class SpokenProgram
    {
        <fList; separator="\n">
    }

    public static void main( String args[] ) throws Exception
    {
        SpokenProgram p = new SpokenProgram();
        p.main();
    }
}
>>

function(name,type,params,body,locals) ::= 
<<
<type> <name>(<params>)
{
    System.out.println("Entered function <name>");
    <body>
    System.out.println("Leaving function <name>");
    return 0;
}

>>

assign(type,name,value) ::= "<if(type)><type> <endif><name> = <value>;"

block(body) ::=
<<
{
    <body; separator="\n">
}
>>

declarations(vars) ::= "<vars; separator=\";\n\">;"

printOut(string) ::= "System.out.print( <string> );"

arglist(args) ::= "<args; separator=\", \">"

formal_arg(type,name) ::= "/*<type>*/ int <name>"

string_constant(text) ::= "\"<text>\""

int_constant(val) ::= "<val>"

float_constant(val) ::= "<val>"

ident(name) ::= "<name>"

expr(e1,e2,op) ::= "(<e1>) <op> (<e2>)"

while(guard,body) ::=
<<
while ( <guard> )
<body:block(body=body)>
>>

funcCall(func,args) ::= "<func>(<args; separator=\",\">);"
