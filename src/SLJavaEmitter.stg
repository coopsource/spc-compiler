/*
 * Copyright 2011-2014 Benjamin M. Gordon
 * 
 * This file is part of the spoken language compiler.
 *
 * The spoken language compiler is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The spoken language compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the spoken language compiler.  If not, see <http://www.gnu.org/licenses/>.
 */

group SLJavaEmitter;

program(name,fList) ::=
<<
import java.util.Vector;
import java.util.Scanner;

public class <name>
{
    static void array_safe_setInteger( Vector\<Integer\> arr, int index, int value )
    {
    	if ( index >= arr.size() ) {
    		int newSize = Math.max( arr.size(), index );
    		arr.setSize( newSize );
    	}
    	
    	arr.set( index-1, value );
    }
    
    static int array_safe_getInteger( Vector\<Integer\> arr, int index )
    {
    	if ( index >= arr.size() ) {
    		int newSize = Math.max( arr.size(), index );
    		arr.setSize( newSize );
    	}
    	
    	return arr.get( index-1 );
    }
    
    static void array_safe_setString( Vector\<String\> arr, int index, String value )
    {
    	if ( index >= arr.size() ) {
    		int newSize = Math.max( arr.size(), index );
    		arr.setSize( newSize );
    	}
    	
    	arr.set( index-1, value );
    }
    
    static String array_safe_getString( Vector\<String\> arr, int index )
    {
    	if ( index >= arr.size() ) {
    		int newSize = Math.max( arr.size(), index );
    		arr.setSize( newSize );
    	}
    	
    	return arr.get( index-1 );
    }

	static String getStringInput(Scanner input)
	{
		return input.next();
	}
	
	static int getIntegerInput(Scanner input)
	{
		return input.nextInt();
	}
	
    static class SpokenProgram
    {
    	private Scanner _input;
    	
    	public SpokenProgram()
    	{
    	    _input = new Scanner(System.in);
    	}
    	
        <fList; separator="\n">
    }

    public static void main( String args[] ) throws Exception
    {
        SpokenProgram p = new SpokenProgram();
        p.main();
    }
}
>>

function(name,type,params,body,locals) ::= 
<<
<type.javaType> <name>(<params>)
<body>

>>

newArray(type,name,index,value) ::= 
<<
Vector\<<type.javaObjectType>\> <name> = new Vector\<<type.javaObjectType>\>();
<arrayAssign(...)>
>>

readNewVar(type,name) ::= "<type.javaType> <name> = get<type.javaObjectType>Input(this._input);"

readVar(type,name) ::= "<name> = get<type.javaObjectType>Input(this._input);"

readNewArray(type,name,index) ::=
<<
Vector\<<type.javaObjectType>\> <name> = new Vector\<<type.javaObjectType>\>();
<arrayAssign(...)>
>>

readArray(type,name,index) ::= "array_safe_set<type.javaObjectType>(<name>,<index>,get<type.javaObjectType>Input(this._input));"

assign(type,name,value) ::= "<if(type)><type.javaType> <endif><name> = <value>;"

arrayAssign(type,name,index,value) ::= "array_safe_set<type.javaObjectType>(<name>,<index>,<value>);"

block(body) ::=
<<
{
    <body; separator="\n">
}
>>

declarations(vars) ::= "<vars; separator=\";\n\">;"

printOut(string) ::= "System.out.print( <string> );"

arglist(args) ::= "<args; separator=\", \">"

formal_arg(type,name) ::= "<type.javaType> <name>"

formal_arg_array(type,name) ::= "Vector\<<type.javaObjectType>\> <name>"

string_constant(text) ::= "<text>"

int_constant(val) ::= "<val>"

float_constant(val) ::= "<val>"

ident(name) ::= "<name>"

expr(e1,e2,op) ::= "(<e1>) <op> (<e2>)"

not(e) ::= "!(<e>)"

arrayRef(type,index,array) ::= "array_safe_get<type.javaObjectType>(<array>,<index>)"

while(guard,body) ::=
<<
while ( <guard> )
<body>
>>

funcStmt(func,args) ::= "<funcCall(...)>;"

funcCall(func,args) ::= "<func>(<args; separator=\",\">)"

return(expr) ::= "return <expr>;"

ifStmt(cond,trueBlock,falseBlock) ::=
<<
if ( <cond> )
<trueBlock>
else
<falseBlock>
>>

emptyStmt() ::= "/* nothing */"
