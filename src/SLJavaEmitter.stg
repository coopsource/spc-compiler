group SLJavaEmitter;

program(name,fList) ::=
<<
import java.util.Vector;

public class <name>
{
    static void array_safe_set( Vector\<Integer\> arr, int index, int value )
    {
    	if ( index >= arr.size() ) {
    		int newSize = Math.max( arr.size()*2, index*2 );
    		arr.setSize( newSize );
    	}
    	
    	arr.set( index-1, value );
    }
    
    static int array_safe_get( Vector\<Integer\> arr, int index )
    {
    	if ( index >= arr.size() ) {
    		int newSize = Math.max( arr.size()*2, index*2 );
    		arr.setSize( newSize );
    	}
    	
    	return arr.get( index-1 );
    }
    
    static class SpokenProgram
    {
        <fList; separator="\n">
    }

    public static void main( String args[] ) throws Exception
    {
        SpokenProgram p = new SpokenProgram();
        p.main();
    }
}
>>

function(name,type,params,body,locals) ::= 
<<
<type.javaType> <name>(<params>)
<body>

>>

newArray(type,name,index,value) ::= 
<<
Vector\<<type.javaObjectType>\> <name> = new Vector\<<type.javaObjectType>\>();
<arrayAssign(...)>
>>

assign(type,name,value) ::= "<if(type)><type.javaType> <endif><name> = <value>;"

arrayAssign(name,index,value) ::= "array_safe_set(<name>,<index>,<value>);"

block(body) ::=
<<
{
    <body; separator="\n">
}
>>

declarations(vars) ::= "<vars; separator=\";\n\">;"

printOut(string) ::= "System.out.print( <string> );"

arglist(args) ::= "<args; separator=\", \">"

formal_arg(type,name) ::= "<type.javaType> <name>"

string_constant(text) ::= "<text>"

int_constant(val) ::= "<val>"

float_constant(val) ::= "<val>"

ident(name) ::= "<name>"

expr(e1,e2,op) ::= "(<e1>) <op> (<e2>)"

arrayRef(index,array) ::= "array_safe_get(<array>,<index>)"

while(guard,body) ::=
<<
while ( <guard> )
<body>
>>

funcStmt(func,args) ::= "<funcCall(...)>;"

funcCall(func,args) ::= "<func>(<args; separator=\",\">)"

return(expr) ::= "return <expr>;"

ifStmt(cond,trueBlock,falseBlock) ::=
<<
if ( <cond> )
<trueBlock>
else
<falseBlock>
>>

emptyStmt() ::= "/* nothing */"
